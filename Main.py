import requests
import urllib.parse
import webbrowser

def generate_overpass_code(area_name, buildings_list, color_code=None):
    building_pattern="|".join(buildings_list)
    overpass_code_temp=f"""/*
This has been generated by the Overpass Query Builder.
The original search was:
"building~'{building_pattern}' in area({area_name})"
*/
[out:json][timeout:2500];
// fetch area with ID {area_name} to search in
{{{{geocodeArea:{area_name}}}}}->.searchArea;
// gather results
(
// query part for: "building~'{building_pattern}'"
node["building"~"{building_pattern}"](area.searchArea);
way["building"~"{building_pattern}"](area.searchArea);
relation["building"~"{building_pattern}"](area.searchArea);
);
// print results
out body;
>;
out skel qt;
"""

    if color_code:
        overpass_code_temp+=f"\n{{{{style:\n{color_code}\n}}}}"

    return overpass_code_temp

"""
def get_osm_id(area_name):
    base_url="https://nominatim.openstreetmap.org/search"
    params={
        'q': area_name,
        'format': 'json',
        'polygon_geojson': '0',
        'featuretype': 'city'  # Try to get a city-level result
    }
    headers={'User-Agent': 'OverpassQueryBuilder/1.0'}

    try:
        response=requests.get(base_url, params=params, headers=headers)
        response.raise_for_status()
        data=response.json()

        if data:
            # Get the first result and extract its OSM ID and type
            first_result=data[0]
            osm_id=first_result['osm_id']
            osm_type=first_result['osm_type']  # node, way, or relation
            return f"{osm_type}/{osm_id}"
        else:
            print(f"Error: No results found for '{area_name}'.")
            return None
    except requests.exceptions.RequestException as e:
        print(f"Error fetching data from Nominatim: {e}")
        return None
"""


def generate_color_code(buildings_list, color_list):
    color_code=[]
    color_map=dict(zip(buildings_list, color_list))

    for buildings_list, color_list in color_map.items():
        rule=f"""way[building={buildings_list}], relation[building={buildings_list}]
{{ color:{color_list}; fill-color:{color_list}; width:8; opacity:1; }}"""
        color_code.append(rule)

    return "\n".join(color_code)


def open_overpass_turbo(overpass_code):
    base_url="https://overpass-turbo.eu/"
    encoded_query=urllib.parse.quote(overpass_code)
    full_url=f"{base_url}?Q={encoded_query}"
    print(f"Opening your map in the browser...")
    webbrowser.open(full_url)

def main():

    print("Overpass Turbo Query Generator:\n\n")
    area_name=input("Enter an area name (eg, Mississauga, Ontario): ").strip()

    print("\nSelect building types separated by commas,\nExample: apartment,office,industrial,retail")
    buildings=input("Enter: ").strip()
    buildings_list=[]
    for building in buildings.split(","):
        if building.strip():
            buildings_list.append(building.strip())

    print("\nEnter colors for each building types in the same order separated by commas, ")
    print("Example: green,cyan,orange,blue")
    colors=input("Enter: ").strip()
    colors_list=[]
    for color in colors.split(","):
        if color.strip():
            colors_list.append(color.strip())

    color_code=generate_color_code(buildings_list, colors_list)

    print("Generated Overpass QL Code:\n\n")

    overpass_code=generate_overpass_code(area_name, buildings_list, color_code)
    print(overpass_code)
    open_confirmation=input("\nOpen code in Overpass Turbo? (Y/N): ")
    if open_confirmation=='Y':
        open_overpass_turbo(overpass_code)

if __name__ == "__main__":
    main()
