import requests
import tkinter as tk
from tkinter import ttk, colorchooser
import urllib.parse
import webbrowser

def generate_overpass_code(area_name, buildings_list, color_map):
    building_pattern="|".join(buildings_list)
    overpass_code_temp=f"""/*
This has been generated by the Overpass Query Builder.
The original search was:
"building~'{building_pattern}' in area({area_name})"
*/
[out:json][timeout:2500];
// fetch area with ID {area_name} to search in
{{{{geocodeArea:{area_name}}}}}->.searchArea;
// gather results
(
// query part for: "building~'{building_pattern}'"
node["building"~"{building_pattern}"](area.searchArea);
way["building"~"{building_pattern}"](area.searchArea);
relation["building"~"{building_pattern}"](area.searchArea);
);
// print results
out body;
>;
out skel qt;
"""

    color_list=[]
    for building, color in color_map.items():
        code=f"""way[building={building}], relation[building={building}]
{{ color:{color}; fill-color:{color}; width:8; opacity:1; }}"""
        color_list.append(code)

    color_block="\n".join(color_list)
    overpass_code_temp+=f"\n\n{{{{style:\n{color_block}\n}}}}"
    return overpass_code_temp

def choose_color(entry_widget):
    color=colorchooser.askcolor(title="Choose color")
    if color[1]:
        entry_widget.delete(0, tk.END)
        entry_widget.insert(0, color[1])

def generate_and_open():
    area=area_entry.get()
    types=building_entry.get()
    building_list=[]
    for t in types.split(','):
        if t.strip():
            building_list.append(t.strip())

    color_map={}
    for i, building in enumerate(building_list):
        color_entry=color_entries[i]
        color_hex=color_entry.get().strip()
        if color_hex:
            color_map[building]=color_hex

    query=generate_overpass_code(area, building_list, color_map)
    code_display.delete('1.0', tk.END)
    code_display.insert('1.0', query)

    encoded_query=urllib.parse.quote(query)
    overpass_url=f"https://overpass-turbo.eu/?Q={encoded_query}"
    webbrowser.open(overpass_url)

def create_color_inputs():
    for widget in color_frame.winfo_children():
        widget.destroy()

    global color_entries
    color_entries=[]
    types=building_entry.get()
    building_list=[]

    for t in types.split(','):
        if t.strip():
            building_list.append(t.strip())

    if building_list:
        tk.Label(color_frame, text="Assign Colors:", font=('Arial', 9, 'bold')).grid(row=0, column=1, padx=5)

    for i, building in enumerate(building_list):
        row=i+1
        tk.Label(color_frame, text=f"{building}:").grid(row=row, column=0, sticky="e", padx=5, pady=2)
        color_entry=tk.Entry(color_frame, width=10)
        color_entry.grid(row=row, column=1, padx=5, pady=2)
        color_entries.append(color_entry)

        color_button=ttk.Button(color_frame, text="Pick", width=5,
                              command=lambda e=color_entry: choose_color(e))
        color_button.grid(row=row, column=2, padx=5, pady=2)

"""
def get_osm_id(area_name):
    base_url="https://nominatim.openstreetmap.org/search"
    params={
        'q': area_name,
        'format': 'json',
        'polygon_geojson': '0',
        'featuretype': 'city'  # Try to get a city-level result
    }
    headers={'User-Agent': 'OverpassQueryBuilder/1.0'}

    try:
        response=requests.get(base_url, params=params, headers=headers)
        response.raise_for_status()
        data=response.json()

        if data:
            # Get the first result and extract its OSM ID and type
            first_result=data[0]
            osm_id=first_result['osm_id']
            osm_type=first_result['osm_type']  # node, way, or relation
            return f"{osm_type}/{osm_id}"
        else:
            print(f"Error: No results found for '{area_name}'.")
            return None
    except requests.exceptions.RequestException as e:
        print(f"Error fetching data from Nominatim: {e}")
        return None
"""

root=tk.Tk()
root.title("Overpass Turbo Code Generator")
tk.Label(root, text="Area Name (e.g., Mississauga):").grid(row=0, column=0, sticky="w", padx=5, pady=5)
area_entry=tk.Entry(root, width=40)
area_entry.grid(row=0, column=1, padx=5, pady=5)

tk.Label(root, text="Building Types (comma-separated), eg. apartment,office,retail\n Enter: ").grid(row=1, column=0, sticky="w", padx=5, pady=5)
building_entry=tk.Entry(root, width=40)
building_entry.grid(row=1, column=1, padx=5, pady=5)

update_button=ttk.Button(root, text="Create Color Options", command=create_color_inputs)
update_button.grid(row=2, column=0, columnspan=2, pady=5)

color_frame=ttk.Frame(root)
color_frame.grid(row=3, column=0, columnspan=2, padx=10, pady=5, sticky="ew")

generate_button=ttk.Button(root, text="Generate and Open Query", command=generate_and_open)
generate_button.grid(row=4, column=0, columnspan=2, pady=10)

code_display=tk.Text(root, width=80, height=20)
code_display.grid(row=5, column=0, columnspan=2, padx=5, pady=5)

color_entries=[]

root.mainloop()